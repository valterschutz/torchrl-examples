[project]
name = "torchrl-examples"
version = "0.1.1"
description = "Examples of training RL agents using torchrl-agents."
readme = "README.md"
authors = [
    { name = "Valter Schutz", email = "valterschutz@proton.me" }
]
license = { file = "LICENSE" }
requires-python = ">=3.10"
dependencies = [
    "gym[classic-control,mujoco]>=0.26.2",
    "torchrl>=0.8.0",
    "torchrl-agents==0.3.6",
    "tqdm>=4.67.1",
    "wandb[media]>=0.19.10",
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]

[project.urls]
Homepage = "https://github.com/valterschutz/torchrl-examples"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/torchrl_examples"]

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

[tool.mypy]
strict = true

[tool.ruff]
line-length = 88

[tool.ruff.lint]
extend-select = [
  "UP",  # pyupgrade, enforce newer python conventions
  "ANN", # flake8-annotations, similar to mypy
  "B", # flake8-bugbear, find likely bugs
  "Q", # flake8-quotes, use quotes correctly
  "C90", # mccabe for complexity checking
  "NPY", # some numpy specific rules
  "PD", # opinionated pandas
  "N", # pep8-naming, follow PEP naming conventions
  "PERF", # perflint, catch performance anti-patterns
  "E", # pycodestyle errors
  "W", # pycodestyle warnings
  "D", # pydocstyle, follow docstring conventions
  "PL", # pylint, check code for errors
  "FURB", # refurb, modern Python
  "RUF", # ruff-specific rules
  "TRY", # tryceratops, linting for exception handling
]
ignore = [
    "D105", # Missing docstring in magic method
    "D213", # multi-line-summary-second-line
    "D107", # Missing docstring in `__init__`"
    "D102", # Missing docstring in public method
    "D101", # Missing docstring in public class
    "D211", # no-blank-line-before-class
    "D203", # incorrect-blank-line-before-class
    "PLR2004", # Magic value used in comparison, useful in tests
    "ANN204", # Missing return type annotation for special method `__init__`
    "TRY003", # Avoid specifying long messages outside the exception class
    "D100", # Missing docstring in public module
    "PLR0911", # Too many return statements
    "D103", # Missing docstring in public function
    "RUF009", # Do not perform function call `unserializable` in dataclass defaults
    "PLR0913", # Too many arguments in function definition
    "ANN001", # Missing type annotation for function argument
    "ANN201", # Missing return type annotation for public function
    "D104", # Missing docstring in public package
    # Recommended to ignore according to https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191", # tab-indentation
    "E111", # indentation-with-invalid-multiple
    "E114", # indentation-with-invalid-multiple-comment
    "E117", # over-indented
    "D206", # docstring-tab-indentation
    "D300", # triple-single-quotes
    "Q000", # bad-quotes-inline-string
    "Q001", # bad-quotes-multiline-string
    "Q002", # bad-quotes-docstring
    "Q003", # avoidable-escaped-quote
    "COM812", # missing-trailing-comma
    "COM819", # prohibited-trailing-comma
    "ISC002", # multi-line-implicit-string-concatenation if used without ISC001 and flake8-implicit-str-co
    "E501", # line-too-long, ruff format does not guarantee correct line length
]

[dependency-groups]
dev = [
    "ruff>=0.11.8",
]
